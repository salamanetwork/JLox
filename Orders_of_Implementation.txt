// **Lox.java**
class Lox:
Fields:
    private static boolean hadError = false;                            // We’ll use this to ensure we don’t try to execute code that has a known error.

Methods:
    public static void main(String[] args) throws IOException;

    private static void runFile(String path) throws IOException;        // Run Direct Script File.

    private static void runPrompt() throws IOException;                 // REPL - Read, Evaluate, Print and Loop.

    private static void run(String source);                             // Run the actual source code

    public static void error(int line, String message);                 // Handling Error

    private static void report(int line, String where, String message); // Reporting Error
------------------------------------------------------------------------------------------------------------------------------------------------------------

// **TokenType.java**
enum TokenType:
// Single-character tokens:
LEFT_PAREN, RIGHT_PAREN, LEFT_BRACE, RIGHT_BRACE,
COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,

// One or two character tokens:
BANG, BANG_EQUAL,
EQUAL, EQUAL_EQUAL,
GREATER, GREATER_EQUAL,
LESS, LESS_EQUAL,

// Literals:
IDENTIFIER, STRING, NUMBER,

// Keywords:
AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,
PRINT, RETURN, SUPER, THIS, TRUE, VAR, WHILE,
EOF

------------------------------------------------------------------------------------------------------------------------------------------------------------
// **Token.java**
class Token:
Fields:
    final TokenType type;               // Token Type

    final String lexeme;                // Store the Lexeme

    final Object literal;               // Store the actual value that represents the lexeme (number, string, boolean, ...)

    final int line;                     // Store the location Information

Methods:
    Token(TokenType type, String lexeme, Object literal, int line);

    public String toString();           // To print out the current token

------------------------------------------------------------------------------------------------------------------------------------------------------------
// **Scanner.java**
class Scanner:
Fields:
    private final String source;                            // Holding The  Source String

    private final List<Token> tokens = new ArrayList<>();   // Holding the tokens' list

    private int start = 0;                                  // Points to the first character in the lexeme being scanned

    private int current = 0;                                // Points at the character currently being considered

    private int line = 1;                                   // Points to How many lines as a counter increased by '\n' when it is found.

    private static final Map<String, TokenType> keywords;   // To get identifiers working: We define the set of reserved words in a map.

Methods:
    Scanner(String source);
    public List<Token> scanTokens();                        // The aforementioned loop that going to generate that tokens

    private void scanToken();                               // In each turn of the loop, we scan a single token. This is the real heart of the scanner.

    private void identifier();                              // Handling Reserved Words and Identifiers:

    private void number();                                  // Handling Number literals lexeme:

    private void string();                                  // Handling string literal lexeme:

    private char advance();                                 // The advance() method consumes the next character in the source file and returns it.

    private boolean match(char expected);                   // It’s like a conditional advance().

    private char peek();                                    // The peek() method: It’s sort of like advance(), but doesn’t consume the character.

    private char peekNext();                                //  It’s sort of like peek(), but check the character after you peek a lookahead peek().

    private boolean isAlpha(char c);                        // The isAlpha() method: to look for any alphabets.

    private boolean isAlphaNumeric(char c);                 // The isAlphaNumeric() method: to check if the character 'c' is Alphabetic Or Numeric

    private boolean isDigit(char c);                        // The isDigit() method: to look for any digit.

    private void addToken(TokenType type);                  // Where advance() is for input, addToken() is for output.

    private void addToken(TokenType type, Object literal);  // We’ll use this as overloaded to handle tokens with literal values soon.

    private boolean isAtEnd();                              // Helper function that tells us if we’ve consumed all the characters.

------------------------------------------------------------------------------------------------------------------------------------------------------------
Chapter 5:

    - context-free grammar *CFG*
    - In our scanner’s grammar, the alphabet consists of individual characters and the strings are the valid lexemes—roughly “words”.
    - In the syntactic grammar we’re talking about now, we’re at a different level of granularity.
    - Now each “letter” in the alphabet is an entire token and a “string” is a sequence of tokens—an entire expression.

    Terminology                         Lexical grammar         Syntactic grammar
    ------------------------------------------------------------------------------
    The “alphabet” is             →     Characters                 Tokens
    A “string” is                 →     Lexeme or token            Expression
    It’s implemented by the       →     Scanner                    Parser

    - A formal grammar’s job is to specify which strings are valid and which aren’t.
    - If we were defining a grammar for English sentences, “eggs are tasty for breakfast” would be in the grammar, but “tasty breakfast for are eggs” would probably not.

    # Rules for grammars:
        - If you start with the rules, you can use them to generate strings that are in the grammar.
            - Strings created this way are called derivations because each is derived from the rules of the grammar.
        - Rules are called productions because they produce strings in the grammar.
            - Each production in a context-free grammar has a *head*—its name—and a body, which describes what it generates.
            - In its pure form, the body is simply a list of symbols.
            - Symbols come in two delectable flavors:
                - A *terminal*:
                    - is a letter from the grammar’s alphabet.
                    - You can think of it like a literal value.
                    - In the syntactic grammar we’re defining, the terminals are individual lexemes—tokens coming from the scanner like 'if' or '1234'.
                    - You simply produce that one symbol.
                - A *non-terminal*:
                    - is a named reference to another rule in the grammar.
                    - It means “play that rule and insert whatever it produces here”.
                    - In this way, the grammar composes.
        - There is one last refinement:
            - you may have multiple rules with the same name.
            - When you reach a non-terminal with that name, you are allowed to pick any of the rules for it, whichever floats your boat.

    # Enhancing our notation:
        - In addition to terminals and non-terminals, we’ll allow a few other kinds of expressions in the body of a rule:
            - Instead of repeating the rule name each time we want to add another production for it, we’ll allow a series of productions separated by a pipe (|).
            - Further, we’ll allow parentheses '()' for grouping and then allow '|' within that to select one from a series of options within the middle of a production.
            - So, we also use a postfix '*' to allow the previous symbol or group to be repeated zero or more times.
            - A postfix '+' is similar, but requires the preceding production to appear at least once.
            - A postfix '?' is for an optional production. The thing before it can appear zero or one time, but not more.

    # A Grammar for Lox expressions:
        - Literals. Numbers, strings, Booleans, and nil.
        - Unary expressions. A prefix ! to perform a logical not, and - to negate a number.
        - Binary expressions. The infix arithmetic (+, -, *, /) and logic operators (==, !=, <, <=, >, >=) we know and love.
        - Parentheses. A pair of ( and ) wrapped around an expression.
        - Primitive Lox's Grammar:

            ------------------------------------------------------------------------------------------------------------
            expression     → literal
                           | unary
                           | binary
                           | grouping ;

            literal        → NUMBER | STRING | "true" | "false" | "nil" ;
            grouping       → "(" expression ")" ;
            unary          → ( "-" | "!" ) expression ;
            binary         → expression operator expression ;
            operator       → "==" | "!=" | "<" | "<=" | ">" | ">="
                           | "+"  | "-"  | "*" | "/" ;
            ------------------------------------------------------------------------------------------------------------

            * In addition to quoted strings for terminals that match exact lexemes.
            * We CAPITALIZE terminals that are a single lexeme whose text representation may vary.
            * 'NUMBER' is any number literal.
            * 'STRING' is any string literal.
            * We’ll do the same for 'IDENTIFIER'.

    # Implementing Syntax Trees:
        - That little expression grammar is our skeleton.
        - Since the grammar is recursive, our data structure will form a tree.
        - Since this structure represents the syntax of our language, it’s called a *syntax tree*.
            - In particular, we’re defining an abstract syntax tree (AST).
            - In a parse tree, every single grammar production becomes a node in the tree.
            - An AST elides productions that aren’t needed by later phases.
        - Our scanner used a single Token class to represent all kinds of lexemes.
            - To distinguish the different kinds—think the number 123 versus the string "123"—we included a simple TokenType enum.
            - Syntax trees are not so homogeneous.
            - Unary expressions have a single operand, binary expressions have two, and literals have none.
            - Tokens aren’t entirely homogeneous either.
            - Tokens for literals store the value, but other kinds of lexemes don’t need that state.
        - We’ll define a base class for expressions **Expr.java**.
        - Then, for each kind of expression—each production under expression—we create a subclass that has fields for the non-terminals specific to that rule.
        - This way, we get a compile error if we, say, try to access the second operand of a unary expression.

------------------------------------------------------------------------------------------------------------------------------------------------------------
// **Expr.java**
abstract class Expr:
Fields:

Methods:


// For Subclasses:
    - Instead of tediously handwriting each class definition, field declaration, constructor, and initializer.
    - We’ll hack together a script that does it for us.
    - It has a description of each tree type—its name and fields—and it prints out the Java code needed to define a class with that name and state.




------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------















